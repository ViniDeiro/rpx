import { NextApiRequest, NextApiResponse } from 'next';
import { connectToDatabase } from '@/lib/mongodb/connect';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Apenas aceitar requisi√ß√µes GET
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  try {
    // Extrair par√¢metros da requisi√ß√£o
    const { userId, forceCheck } = req.query;
    
    // Registrar a requisi√ß√£o para debug
    console.log(`‚öôÔ∏è Verificando status de matchmaking para usu√°rio: ${userId}, forceCheck: ${forceCheck}`);

    if (!userId) {
      return res.status(400).json({ 
        error: 'ID do usu√°rio √© obrigat√≥rio',
        matchFound: false 
      });
    }

    // Conectar ao banco de dados
    const { db } = await connectToDatabase();
    
    // Definir a consulta para encontrar partidas ativas para o usu√°rio
    const matchQuery = {
      $or: [
        { 'teams.players.id': userId },
        { 'teams.0.players.id': userId },
        { 'teams.1.players.id': userId },
      ],
      status: { $in: ['waiting_players', 'in_progress', 'waiting'] }
    };
    
    // Encontrar partidas que envolvem o usu√°rio
    const activeMatch = await db.collection('matches').findOne(matchQuery);
    
    if (activeMatch) {
      console.log(`‚úÖ Partida ativa encontrada para o usu√°rio ${userId}: ${activeMatch.id}`);
      return res.status(200).json({
        matchFound: true,
        match: activeMatch
      });
    }
    
    // Verificar fila de matchmaking - usu√°rio ainda est√° na fila ou acaba de encontrar uma partida?
    const queueEntry = await db.collection('matchmaking_queue').findOne({ userId });
    
    if (queueEntry) {
      console.log(`üëÄ Usu√°rio ${userId} est√° na fila. Status: ${queueEntry.status}`);
      
      // Se o usu√°rio tem uma partida associada (matched)
      if (queueEntry.status === 'matched' && queueEntry.matchId) {
        // Buscar detalhes da partida
        const match = await db.collection('matches').findOne({ id: queueEntry.matchId });
        
        if (match) {
          console.log(`üéÆ Partida encontrada via fila: ${match.id}`);
          return res.status(200).json({
            matchFound: true,
            match: match,
            source: 'queue'
          });
        } else {
          console.log(`‚ö†Ô∏è Partida ${queueEntry.matchId} referenciada na fila n√£o foi encontrada`);
        }
      }
      
      // Se o usu√°rio tem uma partida tempor√°ria de espera
      if (queueEntry.waitingMatchId) {
        const tempMatch = await db.collection('matches').findOne({ id: queueEntry.waitingMatchId });
        
        if (tempMatch) {
          console.log(`‚åõ Partida tempor√°ria encontrada: ${tempMatch.id}`);
          return res.status(200).json({
            matchFound: true,
            match: tempMatch,
            source: 'waiting'
          });
        }
      }
      
      // Calcular tempo de espera para informa√ß√£o
      const waitTime = Math.floor((Date.now() - new Date(queueEntry.createdAt).getTime()) / 1000);
      
      return res.status(200).json({
        matchFound: false,
        message: `Aguardando por ${waitTime}s`,
        waitTime,
        queueStatus: queueEntry.status,
        inQueue: true
      });
    }
    
    // Usu√°rio n√£o est√° na fila e n√£o tem partidas ativas
    console.log(`‚ÑπÔ∏è Usu√°rio ${userId} n√£o est√° na fila nem em partidas ativas`);
    return res.status(200).json({ 
      matchFound: false,
      message: 'N√£o est√° na fila de matchmaking',
      inQueue: false
    });
    
  } catch (error) {
    console.error('Erro ao verificar status do matchmaking:', error);
    return res.status(500).json({ 
      error: 'Erro interno no servidor',
      matchFound: false
    });
  }
} 