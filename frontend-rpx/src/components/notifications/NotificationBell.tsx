import React, { useState, useEffect } from 'react';
import { Bell, BellOff } from 'react-feather';
import { useSession } from 'next-auth/react';
import axios from 'axios';
import NotificationCenter from './NotificationCenter';
import { toast } from 'react-toastify';
import { PushNotificationService } from '@/services/push/pushNotificationService';

// Definir uma interface para notifica√ß√µes
interface Notification {
  _id: string;
  type: string;
  read: boolean;
  createdAt: string;
  [key: string]: any; // Para campos adicionais espec√≠ficos de cada tipo
}

export default function NotificationBell() {
  const [isOpen, setIsOpen] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [pushEnabled, setPushEnabled] = useState(false);
  const [pushLoading, setPushLoading] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [authError, setAuthError] = useState(false);
  const { data: session } = useSession();
  
  // Fun√ß√£o principal para buscar notifica√ß√µes
  const fetchNotifications = async () => {
    if (!session?.user || isLoading) return;
    
    try {
      setIsLoading(true);
      console.log('üîé NotificationBell: Buscando notifica√ß√µes...');
      
      // Obter token para autentica√ß√£o
      const token = localStorage.getItem('auth_token') || 
                     (session as any)?.accessToken || 
                     localStorage.getItem('token');
      
      // Definir cabe√ßalhos com token de autentica√ß√£o
      const headers: Record<string, string> = {};
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      // Buscar as notifica√ß√µes da API unificada com token
      const response = await axios.get('/api/notifications', { 
        headers,
        // Adicionar timeout para evitar espera indefinida
        timeout: 5000
      });
      
      if (response.data.success) {
        const { notifications, unreadCount } = response.data.data;
        
        console.log(`‚úÖ NotificationBell: API retornou ${notifications.length} notifica√ß√µes, ${unreadCount} n√£o lidas`);
        
        // Log detalhado quando h√° notifica√ß√µes (para debug)
        if (notifications && notifications.length > 0) {
          console.log('üìã NotificationBell: Lista de notifica√ß√µes:');
          notifications.forEach((notif: Notification, index: number) => {
            if (notif.type === 'lobby_invite') {
              const inviterName = notif.inviterName || 
                                 (notif.data?.inviter?.username) || 
                                 'Desconhecido';
              const inviteId = notif.data?.invite?._id || notif._id || notif.id;
              const lobbyId = notif.lobbyId || notif.data?.invite?.lobbyId || notif.data?.lobbyId || 'Desconhecido';
              console.log(`  üì® #${index+1}: Convite de ${inviterName} | ID: ${inviteId?.substring(0,8)}... | Lobby: ${typeof lobbyId === 'string' ? lobbyId.substring(0,8) : 'N/A'}...`);
            } else {
              console.log(`  üì® #${index+1}: Tipo: ${notif.type} | ID: ${(notif._id || notif.id)?.substring(0,8)}...`);
            }
          });
        } else {
          console.log('‚ö†Ô∏è NotificationBell: Nenhuma notifica√ß√£o encontrada');
        }
        
        // Garantir que todas as notifica√ß√µes tenham os campos necess√°rios
        const validNotifications = notifications.filter((n: any) => n && (n._id || n.id));
        
        // Atualizar o estado
        setNotifications(validNotifications);
        setUnreadCount(unreadCount);
        
        // Limpar erros de autentica√ß√£o se houver
        setAuthError(false);
      } else {
        console.error('‚ùå NotificationBell: Erro na resposta da API:', response.data);
      }
    } catch (error) {
      console.error('‚ùå NotificationBell: Erro ao buscar notifica√ß√µes:', error);
      
      // Verificar se √© erro de autentica√ß√£o
      if (axios.isAxiosError(error) && error.response?.status === 401) {
        console.log('üîí NotificationBell: Erro de autentica√ß√£o detectado');
        setAuthError(true);
      }
      
      // N√£o fazer nada em caso de erro - apenas logar
      // Para evitar UI quebrada, mantemos o estado anterior
    } finally {
      setIsLoading(false);
    }
  };
  
  // Efeito para buscar notifica√ß√µes quando o usu√°rio estiver autenticado
  useEffect(() => {
    if (session?.user) {
      console.log('üîÑ NotificationBell: Iniciando componente com usu√°rio logado:', session.user.name);
      
      // Buscar imediatamente na inicializa√ß√£o 
      fetchNotifications();
      
      // Configurar polling para atualizar as notifica√ß√µes a cada 5 segundos
      // Aumentado de 3 para 5 segundos para reduzir sobrecarga
      const interval = setInterval(() => {
        console.log('üîÑ NotificationBell: Verifica√ß√£o peri√≥dica de notifica√ß√µes');
        fetchNotifications();
      }, 5000);
      
      // For√ßar outra busca ap√≥s 2 segundos para garantir que dados s√£o carregados
      // Aumentado de 1 para 2 segundos para dar mais tempo ao servidor
      setTimeout(() => {
        console.log('üîÑ NotificationBell: Verifica√ß√£o secund√°ria de notifica√ß√µes');
        fetchNotifications();
      }, 2000);
      
      return () => clearInterval(interval);
    }
  }, [session]);
  
  // Verificar se as notifica√ß√µes push est√£o habilitadas
  useEffect(() => {
    if (typeof window !== 'undefined' && 'Notification' in window) {
      setPushEnabled(Notification.permission === 'granted');
    }
  }, []);
  
  // Abrir/fechar o painel de notifica√ß√µes
  const toggleNotificationCenter = () => {
    setIsOpen(!isOpen);
    // Se estiver abrindo, buscar as notifica√ß√µes mais recentes
    if (!isOpen) {
      console.log('üîÑ NotificationBell: Abrindo painel de notifica√ß√µes - Buscando atualiza√ß√µes');
      fetchNotifications();
    }
  };

  // Fun√ß√£o para habilitar notifica√ß√µes push
  const enablePushNotifications = async () => {
    if (!session?.user?.id) {
      toast.error('Voc√™ precisa estar logado para habilitar notifica√ß√µes');
      return;
    }
    
    setPushLoading(true);
    
    try {
      // Inicializar servi√ßo se necess√°rio
      PushNotificationService.initialize();
      
      // Solicitar permiss√£o
      const permission = await PushNotificationService.requestPermission();
      
      if (permission) {
        // Obter token
        const token = await PushNotificationService.getToken();
        
        if (token) {
          // Salvar token
          const success = await PushNotificationService.saveToken(
            session.user.id,
            token
          );
          
          if (success) {
            setPushEnabled(true);
            toast.success('Notifica√ß√µes push habilitadas com sucesso');
          }
        }
      } else {
        toast.warn('Permiss√£o para notifica√ß√µes negada. Verifique as configura√ß√µes do seu navegador.');
      }
    } catch (error) {
      console.error('Erro ao habilitar notifica√ß√µes push:', error);
      toast.error('Erro ao habilitar notifica√ß√µes push');
    } finally {
      setPushLoading(false);
    }
  };
  
  // Fun√ß√£o para for√ßar sincroniza√ß√£o de autentica√ß√£o
  const handleAuthRetry = async () => {
    try {
      toast.info('Sincronizando autentica√ß√£o...');
      const token = localStorage.getItem('auth_token');
      
      if (!token && !session?.user?.id) {
        toast.error('Informa√ß√µes de autentica√ß√£o n√£o encontradas. Fa√ßa login novamente.');
        return;
      }
      
      // Usar a nova API de force-auth
      const response = await fetch('/api/auth/force-auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: token,
          userId: session?.user?.id,
        }),
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // Atualizar o token no localStorage
        if (data.token) {
          localStorage.setItem('auth_token', data.token);
        }
        
        toast.success('Autentica√ß√£o sincronizada com sucesso!');
        setAuthError(false);
        
        // Recarregar a p√°gina para aplicar as mudan√ßas
        window.location.reload();
      } else {
        const errorData = await response.json();
        toast.error(`Falha ao sincronizar: ${errorData.error || 'Erro desconhecido'}`);
      }
    } catch (error) {
      console.error('Erro ao tentar sincronizar autentica√ß√£o:', error);
      toast.error('Erro ao tentar sincronizar. Tente fazer login novamente.');
    }
  };
  
  // Adiciona atributo de teste para facilitar depura√ß√£o
  return (
    <>
      <div className="fixed bottom-4 right-4 z-40 flex flex-col items-end gap-2">
        {/* Bot√£o para habilitar notifica√ß√µes push */}
        {session?.user && !pushEnabled && typeof window !== 'undefined' && 'Notification' in window && (
          <button
            onClick={enablePushNotifications}
            disabled={pushLoading}
            className="bg-gray-800 hover:bg-gray-700 text-white rounded-full px-3 py-2 text-sm shadow-lg flex items-center justify-center relative"
            aria-label="Ativar notifica√ß√µes push"
          >
            {pushLoading ? (
              <span className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
            ) : (
              <BellOff size={16} className="mr-2" />
            )}
            <span>Ativar notifica√ß√µes</span>
          </button>
        )}
        
        {/* Bot√£o para reautenticar quando houver erro 401 */}
        {authError && (
          <button
            onClick={handleAuthRetry}
            className="bg-red-600 hover:bg-red-700 text-white rounded-full px-3 py-2 text-sm shadow-lg flex items-center justify-center relative"
            aria-label="Sincronizar autentica√ß√£o"
          >
            <span className="mr-2">üîÑ</span>
            <span>Sincronizar conta</span>
          </button>
        )}
        
        {/* Bot√£o de notifica√ß√µes */}
        <button
          onClick={toggleNotificationCenter}
          className="bg-primary hover:bg-primary-dark text-white rounded-full p-3 shadow-lg flex items-center justify-center relative"
          aria-label="Notifica√ß√µes"
          data-testid="notification-bell"
        >
          <Bell size={20} />
          {unreadCount > 0 && (
            <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              {unreadCount > 9 ? '9+' : unreadCount}
            </span>
          )}
        </button>
      </div>
      
      <NotificationCenter 
        isOpen={isOpen} 
        onClose={() => setIsOpen(false)}
        notifications={notifications}
        onUpdate={fetchNotifications}
      />
    </>
  );
} 