'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { User, Lock, Shield, Activity, LogOut, Edit, ChevronRight, Clock, Award, Star } from 'react-feather';
import { useAuth } from '@/contexts/AuthContext';
import { formatCurrency } from '@/utils/formatters';
import ProfileBanner from '@/components/profile/ProfileBanner';
import ProfileAvatar from '@/components/profile/ProfileAvatar';
import { Trophy, Medal } from '@/components/ui/icons';
import RankDisplay from '@/components/profile/RankDisplay';
import { Rank, RankTier, RankDivision } from '@/types/ranking';
import { createRank } from '@/utils/rankingSystem';

// Definição de tipos para rankings e insígnias
// ... Removido comentário, já temos os tipos em /types/ranking.ts

// Removido RANK_FRAMES, já temos essas informações em rankingSystem.ts

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  date?: string;
  rarity: 'comum' | 'raro' | 'épico' | 'lendário';
}

// Dados mockados para rankings e insígnias
const MOCK_ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first_win',
    name: 'Primeira Vitória',
    description: 'Ganhou sua primeira aposta',
    icon: '/images/badges/first-win.png',
    date: '2023-10-15',
    rarity: 'comum'
  },
  {
    id: 'hot_streak',
    name: 'Sequência Quente',
    description: 'Ganhou 5 apostas consecutivas',
    icon: '/images/badges/hot-streak.png',
    date: '2023-11-22',
    rarity: 'raro'
  },
  {
    id: 'high_roller',
    name: 'Alto Apostador',
    description: 'Apostou mais de R$1.000 em uma única aposta',
    icon: '/images/badges/high-roller.png',
    date: '2023-12-01',
    rarity: 'épico'
  },
  {
    id: 'tournament_1',
    name: 'Campeonato Regional 2023',
    description: 'Participou do Campeonato Regional 2023',
    icon: '/images/badges/tournament-regional.png',
    date: '2023-09-28',
    rarity: 'épico'
  },
  {
    id: 'national_champion',
    name: 'Campeão Nacional',
    description: 'Venceu o Campeonato Nacional 2023',
    icon: '/images/badges/national-champion.png',
    date: '2023-11-05',
    rarity: 'lendário'
  }
];

// Componente para exibir insígnias
const AchievementBadge = ({ achievement }: { achievement: Achievement }) => {
  const rarityColors = {
    comum: 'bg-gray-500',
    raro: 'bg-blue-500',
    épico: 'bg-purple-500',
    lendário: 'bg-yellow-500'
  };
  
  return (
    <div className="flex flex-col items-center">
      <div className={`w-16 h-16 rounded-full flex items-center justify-center ${rarityColors[achievement.rarity]} bg-opacity-20 border-2 border-opacity-50 ${rarityColors[achievement.rarity].replace('bg-', 'border-')}`}>
        {/* Placeholder para ícone da insígnia */}
        {achievement.id === 'first_win' && <Award size={24} className="text-yellow-400" />}
        {achievement.id === 'hot_streak' && <Activity size={24} className="text-red-400" />}
        {achievement.id === 'high_roller' && <Star size={24} className="text-blue-400" />}
        {achievement.id === 'tournament_1' && <Trophy size={24} className="text-purple-400" />}
        {achievement.id === 'national_champion' && <Medal size={24} className="text-yellow-400" />}
      </div>
      <span className="text-xs mt-1 text-gray-300 font-medium">{achievement.name}</span>
    </div>
  );
};

export default function ProfilePage() {
  const router = useRouter();
  const { user, isAuthenticated, isLoading, logout } = useAuth();
  const [redirecting, setRedirecting] = useState(false);
  const [userRank, setUserRank] = useState<Rank | null>(null);
  const [userAchievements, setUserAchievements] = useState<Achievement[]>([]);

  // Redirecionar para login se não estiver autenticado
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      setRedirecting(true);
      // Aguardar 2 segundos antes de redirecionar para mostrar a mensagem
      const timer = setTimeout(() => {
        router.push('/auth/login');
      }, 2000);

      return () => clearTimeout(timer);
    }
  }, [isLoading, isAuthenticated, router]);

  // Carregar rank e conquistas do usuário
  useEffect(() => {
    if (isAuthenticated && user) {
      // Aqui você faria uma chamada à API
      // Por enquanto estamos usando dados mockados
      
      // Simular rank baseado no ID do usuário
      const rankIndex = parseInt(user.id?.toString().slice(-1) || '0');
      const ranks: RankTier[] = ['ferro', 'bronze', 'prata', 'ouro', 'platina', 'diamante', 'mestre', 'grao-mestre', 'desafiante'];
      const divisions: RankDivision[] = ['IV', 'III', 'II', 'I'];
      
      const tier = ranks[rankIndex % ranks.length];
      const division = divisions[Math.floor(Math.random() * divisions.length)];
      const lp = Math.floor(Math.random() * 100);
      
      // Criar um rank mockado usando a utilitária
      setUserRank(createRank(tier, division, lp));
      
      // Simular conquistas
      // Em produção, buscaria do backend
      setUserAchievements(MOCK_ACHIEVEMENTS.slice(0, 3));
    }
  }, [isAuthenticated, user]);

  // Função para formatar a data
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'Não disponível';
    
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).format(date);
  };

  if (redirecting) {
    return (
      <div className="min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-20 bg-card-bg rounded-lg">
            <h2 className="text-xl font-semibold mb-3">Você precisa estar logado para acessar essa página</h2>
            <p className="text-gray-400 mb-6">Redirecionando para a página de login...</p>
            <div className="flex justify-center">
              <div className="w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading || !user || !userRank) {
    return (
      <div className="min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <div className="flex justify-center items-center py-20">
            <div className="w-12 h-12 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-12">
          <ProfileBanner />
          <div className="relative -mt-16 sm:-mt-24 flex flex-col sm:flex-row gap-6 sm:items-end px-4 sm:px-6">
            <ProfileAvatar />
            <div className="flex-1">
              <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
                <div>
                  <h1 className="text-2xl sm:text-3xl font-bold">{user?.name}</h1>
                  <p className="text-gray-400 flex items-center">
                    <User size={14} className="mr-1" />
                    {user?.username || '@' + user?.name?.toLowerCase().replace(' ', '')}
                  </p>
                </div>
                <div className="flex flex-wrap gap-3">
                  <button
                    className="bg-card-bg hover:bg-card-hover transition-colors rounded-lg border border-gray-700 px-4 py-2 flex items-center"
                  >
                    <Edit size={16} className="mr-2" />
                    Editar Perfil
                  </button>
                  <button
                    onClick={() => logout()}
                    className="bg-red-900/20 hover:bg-red-900/30 transition-colors text-red-400 rounded-lg border border-red-900/30 px-4 py-2 flex items-center"
                  >
                    <LogOut size={16} className="mr-2" />
                    Sair
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Coluna Principal */}
          <div className="lg:col-span-2 space-y-8">
            {/* Informações do Perfil */}
            <div className="bg-card-bg border border-gray-800 rounded-xl overflow-hidden">
              <div className="p-6">
                <div className="flex flex-col sm:flex-row gap-6">
                  {/* Estatísticas */}
                  <div className="flex-1 grid grid-cols-2 sm:grid-cols-3 gap-4">
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-primary">{user.stats?.gamesPlayed || 0}</div>
                      <div className="text-sm text-gray-400">Partidas</div>
                    </div>
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-green-500">{user.stats?.victories || 0}</div>
                      <div className="text-sm text-gray-400">Vitórias</div>
                    </div>
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-red-500">{(user.stats?.gamesPlayed || 0) - (user.stats?.victories || 0)}</div>
                      <div className="text-sm text-gray-400">Derrotas</div>
                    </div>
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold">{user.stats?.winRate || '0'}%</div>
                      <div className="text-sm text-gray-400">Taxa de Vitória</div>
                    </div>
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-yellow-500">{user.stats?.bestStreak || 0}</div>
                      <div className="text-sm text-gray-400">Melhor Sequência</div>
                    </div>
                    <div className="bg-card-hover rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-purple-500">{user.stats?.tournamentWins || 0}</div>
                      <div className="text-sm text-gray-400">Torneios</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Rank */}
            <div className="bg-card-bg border border-gray-800 rounded-xl overflow-hidden">
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold flex items-center gap-2">
                    <Shield size={20} className="text-primary" />
                    <span>Ranking</span>
                  </h2>
                  <Link href="/profile/ranking" className="text-primary flex items-center hover:underline">
                    <span>Ver detalhes</span>
                    <ChevronRight size={16} />
                  </Link>
                </div>
                
                <div className="flex flex-col sm:flex-row gap-6">
                  <RankDisplay rank={userRank} compact={false} />
                </div>
              </div>
            </div>

            {/* Conquistas */}
            <div className="bg-card-bg border border-gray-800 rounded-xl overflow-hidden">
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold flex items-center gap-2">
                    <Trophy size={20} className="text-purple-500" />
                    <span>Conquistas e Insígnias</span>
                  </h2>
                  <Link href="/profile/achievements" className="text-primary flex items-center hover:underline">
                    <span>Ver todas</span>
                    <ChevronRight size={16} />
                  </Link>
                </div>
                
                <div className="flex gap-4 mb-6">
                  {userAchievements.length > 0 ? (
                    userAchievements.map((achievement) => (
                      <AchievementBadge key={achievement.id} achievement={achievement} />
                    ))
                  ) : (
                    <div className="text-gray-400 italic">Nenhuma conquista desbloqueada ainda.</div>
                  )}
                </div>
                
                <h3 className="font-semibold mb-3">Atividades Recentes</h3>
                <div className="bg-card-hover rounded-lg overflow-hidden">
                  <table className="w-full">
                    <tbody>
                      <tr className="border-b border-gray-700/50 hover:bg-card-bg transition">
                        <td className="py-3 px-4">
                          <div className="flex items-center gap-3">
                            <div className="bg-purple-500/10 p-2 rounded-full">
                              <Trophy size={16} className="text-purple-500" />
                            </div>
                            <span>Ganhou insígnia: {userAchievements[0]?.name || 'Primeira Vitória'}</span>
                          </div>
                        </td>
                        <td className="py-3 px-4 text-gray-400 flex items-center gap-2">
                          <Clock size={14} />
                          {formatDate(userAchievements[0]?.date)}
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className="bg-purple-500/10 text-purple-500 text-xs px-2 py-1 rounded-full">
                            Conquista
                          </span>
                        </td>
                      </tr>
                      <tr className="border-b border-gray-700/50 hover:bg-card-hover transition">
                        <td className="py-3 px-4">
                          <div className="flex items-center gap-3">
                            <div className="bg-blue-500/10 p-2 rounded-full">
                              <Activity size={16} className="text-blue-500" />
                            </div>
                            <span>Login na plataforma</span>
                          </div>
                        </td>
                        <td className="py-3 px-4 text-gray-400 flex items-center gap-2">
                          <Clock size={14} />
                          {formatDate(new Date().toISOString())}
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className="bg-blue-500/10 text-blue-500 text-xs px-2 py-1 rounded-full">
                            Concluído
                          </span>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>

          {/* Coluna Lateral */}
          <div className="space-y-8">
            {/* Saldo e transações */}
            <div className="bg-card-bg border border-gray-800 rounded-xl overflow-hidden">
              <div className="p-6">
                <h2 className="text-xl font-bold mb-4">Carteira</h2>
                
                <div className="bg-gradient-to-r from-primary/20 to-purple-600/20 rounded-lg p-4 mb-4 relative overflow-hidden">
                  <div className="absolute inset-0 opacity-10 bg-[url('/images/bg-pattern.png')]"></div>
                  <div className="relative">
                    <div className="text-sm text-gray-400 mb-1">Seu saldo atual</div>
                    <div className="text-2xl font-bold text-white">{formatCurrency(user.balance || 0)}</div>
                  </div>
                </div>
                
                <div className="flex gap-3 mb-6">
                  <Link 
                    href="/profile/wallet/deposit" 
                    className="flex-1 bg-green-900/20 hover:bg-green-900/30 transition-colors text-green-500 border border-green-900/30 rounded-lg py-2 text-center font-medium"
                  >
                    Depositar
                  </Link>
                  <Link 
                    href="/profile/wallet/withdraw" 
                    className="flex-1 bg-gray-800 hover:bg-gray-700 transition-colors border border-gray-700 rounded-lg py-2 text-center font-medium"
                  >
                    Sacar
                  </Link>
                </div>
                
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold">Transações Recentes</h3>
                  <Link href="/profile/wallet" className="text-primary text-sm hover:underline flex items-center">
                    <span>Ver todas</span>
                    <ChevronRight size={14} />
                  </Link>
                </div>
                
                <div className="text-center py-6 text-gray-500">
                  <p>Nenhuma transação recente</p>
                </div>
              </div>
            </div>
            
            {/* Links rápidos */}
            <div className="bg-card-bg border border-gray-800 rounded-xl overflow-hidden">
              <div className="p-6">
                <h2 className="text-xl font-bold mb-4">Links Rápidos</h2>
                
                <div className="space-y-2">
                  <Link href="/profile/wallet" className="flex items-center justify-between p-3 rounded-lg hover:bg-card-hover transition-colors">
                    <span className="flex items-center gap-3">
                      <div className="bg-green-900/20 p-2 rounded-full">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-green-500">
                          <path d="M2 8.5H22M6 16.5H8M12 16.5H14" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <rect x="2" y="4.5" width="20" height="16" rx="2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </div>
                      <span>Carteira</span>
                    </span>
                    <ChevronRight size={16} className="text-gray-500" />
                  </Link>
                  
                  <Link href="/profile/account" className="flex items-center justify-between p-3 rounded-lg hover:bg-card-hover transition-colors">
                    <span className="flex items-center gap-3">
                      <div className="bg-blue-900/20 p-2 rounded-full">
                        <User size={16} className="text-blue-500" />
                      </div>
                      <span>Conta</span>
                    </span>
                    <ChevronRight size={16} className="text-gray-500" />
                  </Link>
                  
                  <Link href="/profile/security" className="flex items-center justify-between p-3 rounded-lg hover:bg-card-hover transition-colors">
                    <span className="flex items-center gap-3">
                      <div className="bg-red-900/20 p-2 rounded-full">
                        <Lock size={16} className="text-red-500" />
                      </div>
                      <span>Segurança</span>
                    </span>
                    <ChevronRight size={16} className="text-gray-500" />
                  </Link>
                  
                  <Link href="/profile/history" className="flex items-center justify-between p-3 rounded-lg hover:bg-card-hover transition-colors">
                    <span className="flex items-center gap-3">
                      <div className="bg-purple-900/20 p-2 rounded-full">
                        <Activity size={16} className="text-purple-500" />
                      </div>
                      <span>Histórico de Apostas</span>
                    </span>
                    <ChevronRight size={16} className="text-gray-500" />
                  </Link>
                  
                  <Link href="/profile/ranking" className="flex items-center justify-between p-3 rounded-lg hover:bg-card-hover transition-colors">
                    <span className="flex items-center gap-3">
                      <div className="bg-yellow-900/20 p-2 rounded-full">
                        <Shield size={16} className="text-yellow-500" />
                      </div>
                      <span>Ranking</span>
                    </span>
                    <ChevronRight size={16} className="text-gray-500" />
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 