import { NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { getModels } from '@/lib/mongodb/models';
import { connectToDatabase } from '@/lib/mongodb/connect';
import { cookies } from 'next/headers';

// Segredo para o JWT (idealmente deve vir de vari√°veis de ambiente)
const JWT_SECRET = process.env.JWT_SECRET || process.env.NEXTAUTH_SECRET || 'rpx-app-secret-key-muito-segura-2024';

export async function POST(request: Request) {
  console.log('üî• [DEBUG] API FORCE-AUTH - Requisi√ß√£o de sincroniza√ß√£o de autentica√ß√£o recebida');
  
  try {
    // Estabelecer conex√£o com o banco de dados
    console.log('üîÑ [DEBUG] API FORCE-AUTH - Conectando ao MongoDB...');
    await connectToDatabase();
    console.log('‚úì [DEBUG] API FORCE-AUTH - Conex√£o com MongoDB estabelecida');
    
    const body = await request.json();
    
    // Aceitar tanto um token quanto um ID de usu√°rio
    const { token, userId } = body;
    
    if (!token && !userId) {
      console.log('‚ùå [DEBUG] API FORCE-AUTH - Falha: Token ou ID de usu√°rio n√£o fornecido');
      return NextResponse.json(
        { error: 'Token ou ID de usu√°rio s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    // Obter modelos do MongoDB
    const { User } = await getModels();
    
    let userData;
    
    // Se temos um token, verificar e obter o payload
    if (token) {
      try {
        console.log('üîë [DEBUG] API FORCE-AUTH - Verificando token JWT...');
        const decoded = jwt.verify(token, JWT_SECRET);
        console.log('‚úì [DEBUG] API FORCE-AUTH - Token JWT v√°lido');
        
        if (typeof decoded === 'object' && decoded !== null) {
          // Usar o ID do token para buscar o usu√°rio
          const id = decoded.userId || decoded.id || decoded.sub;
          if (id) {
            console.log(`üîç [DEBUG] API FORCE-AUTH - Buscando usu√°rio por ID do token: ${id}`);
            userData = await User.findById(id);
          }
        }
      } catch (error) {
        console.error('‚ùå [DEBUG] API FORCE-AUTH - Token inv√°lido:', error);
        return NextResponse.json(
          { error: 'Token inv√°lido' },
          { status: 401 }
        );
      }
    }
    
    // Se n√£o temos dados do usu√°rio ainda, mas temos um userId, buscar por ID
    if (!userData && userId) {
      console.log(`üîç [DEBUG] API FORCE-AUTH - Buscando usu√°rio por ID fornecido: ${userId}`);
      userData = await User.findById(userId);
    }
    
    // Se n√£o encontramos o usu√°rio
    if (!userData) {
      console.log('‚ùå [DEBUG] API FORCE-AUTH - Usu√°rio n√£o encontrado');
      return NextResponse.json(
        { error: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      );
    }
    
    console.log(`‚úì [DEBUG] API FORCE-AUTH - Usu√°rio encontrado: ${userData.username}`);

    // Criar um novo token JWT fresco
    const tokenPayload = {
      id: userData._id,
      userId: userData._id,
      username: userData.username,
      email: userData.email,
      role: userData.role
    };
    
    console.log('üîë [DEBUG] API FORCE-AUTH - Criando novo token JWT...');
    const newToken = jwt.sign(tokenPayload, JWT_SECRET, { expiresIn: '7d' });
    console.log('‚úì [DEBUG] API FORCE-AUTH - Novo token JWT criado');

    // Definir cookie de autentica√ß√£o
    cookies().set({
      name: 'auth_token',
      value: newToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 dias
      path: '/'
    });
    
    // Definir cookie para NextAuth 
    cookies().set({
      name: 'next-auth.session-token',
      value: newToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 dias
      path: '/'
    });
    
    console.log('‚úì [DEBUG] API FORCE-AUTH - Cookies de autentica√ß√£o definidos');

    // Preparar dados do usu√°rio para resposta
    const userResponse = {
      id: userData._id,
      username: userData.username,
      email: userData.email,
      role: userData.role,
      profile: userData.profile || {},
      balance: userData.wallet?.balance || 0
    };
    
    // Retornar dados do usu√°rio e token
    console.log('‚úÖ [DEBUG] API FORCE-AUTH - Sincroniza√ß√£o realizada com sucesso');
    return NextResponse.json({
      message: 'Autentica√ß√£o sincronizada com sucesso',
      user: userResponse,
      token: newToken
    });
  } catch (error) {
    console.error('‚ùå [DEBUG] API FORCE-AUTH - Erro:', error);
    return NextResponse.json(
      { error: 'Erro ao processar a sincroniza√ß√£o de autentica√ß√£o' },
      { status: 500 }
    );
  }
} 