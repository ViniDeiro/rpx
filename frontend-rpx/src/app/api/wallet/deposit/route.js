import { request, NextResponse } from 'next/server';
import { v4 as uuidv4 } from 'uuid';

// Armazenamento simulado (em mem√≥ria)
// Na pr√°tica, isso seria armazenado em banco de dados
let transactions = [];
let userWallets = {};

// POST - Solicitar dep√≥sito na carteira (vers√£o simulada)
export async function POST(req) {
  try {
    // Simulamos que a requisi√ß√£o j√° est√° autenticada
    // Em produ√ß√£o, isso seria feito por um middleware auth
    const headers = req.headers;
    const authorization = headers.get('authorization') || '';
    const userId = authorization.replace('Bearer ', '') || 'user-sim-' + uuidv4().substring(0, 8);
    
    // Obter dados da requisi√ß√£o
    const body = await req.json();
    const { amount, paymentMethod } = body;
    
    // Validar dados
    if (!amount || amount < 1) {
      return NextResponse.json(
        { error: 'Valor de dep√≥sito inv√°lido' },
        { status: 400 });
    }
    
    // Simular tempo de processamento
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // Gerar refer√™ncia √∫nica para o dep√≥sito
    const reference = `DEP-${uuidv4().substring(0, 8).toUpperCase()}`;
    const transactionId = uuidv4();
    
    // Criar nova transa√ß√£o simulada
    const transaction = {
      id: transactionId,
      userId: userId,
      type: 'deposit',
      amount,
      status: 'completed', // Na simula√ß√£o, j√° aprovamos o dep√≥sito automaticamente
      paymentMethod,
      reference,
      description: `Dep√≥sito via ${paymentMethod === 'pix' ? 'PIX' : paymentMethod === 'credit_card' || paymentMethod === 'card' ? 'Cart√£o de Cr√©dito' : paymentMethod === 'boleto' ? 'Boleto Banc√°rio' : 'Transfer√™ncia Banc√°ria'}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // Salvar transa√ß√£o em mem√≥ria
    transactions.push(transaction);
    
    // Atualizar saldo do usu√°rio
    if (!userWallets[userId]) {
      userWallets[userId] = { balance: 0 };
    }
    
    userWallets[userId].balance += amount;
    
    // Armazenar o saldo atualizado no localStorage para persist√™ncia
    const currentBalance = userWallets[userId].balance;
    
    console.log(`üí∞ [SIMULA√á√ÉO] Dep√≥sito de R$${amount} para o usu√°rio ${userId} realizado com sucesso`);
    console.log(`üí∞ [SIMULA√á√ÉO] Novo saldo: $${currentBalance}`);
    
    // Simular instru√ß√µes de pagamento
    const paymentInstructions = {
      redirectUrl: 'https://exemplo.com/pagamento-simulado',
      message: 'Esta √© uma simula√ß√£o. Em um ambiente real, voc√™ seria redirecionado para o processador de pagamento.'
    };
    
    // Retornar dados da transa√ß√£o
    return NextResponse.json({
      message: 'Dep√≥sito simulado realizado com sucesso',
      transaction: {
        id: transactionId,
        type: 'deposit',
        amount,
        status: 'completed',
        paymentMethod,
        reference,
        createdAt: new Date()
      },
      paymentInstructions,
      simulation: true,
      currentBalance,
      walletUpdated: true // Indicar que o saldo foi atualizado
    });
  } catch (error) {
    console.error('Erro ao processar solicita√ß√£o de dep√≥sito simulado:', error);
    return NextResponse.json(
      { error: 'Erro ao processar solicita√ß√£o de dep√≥sito' },
      { status: 400 });
  }
} 