require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function verificarLogin() {
  try {
    // Conectar ao MongoDB
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ Conectado ao MongoDB Atlas com sucesso');
    
    // Schema flex√≠vel para acessar qualquer campo
    const userSchema = new mongoose.Schema({}, { strict: false });
    
    // Registrar o modelo
    let User;
    try {
      User = mongoose.model('User');
    } catch (e) {
      User = mongoose.model('User', userSchema);
    }
    
    // Buscar o usu√°rio admin
    const email = 'admin@rpxplatform.com';
    const user = await User.findOne({ 'contact.email': email }).select('+password');
    
    if (!user) {
      console.log(`‚ùå Usu√°rio com email ${email} n√£o encontrado!`);
      return;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', user._id);
    
    // Simulando a verifica√ß√£o do login como no AuthController
    console.log('\nüîç Simulando verifica√ß√£o do AuthController:');
    
    // Verificando a condi√ß√£o de login
    const loginPermitido = !(user.isActive === false || user.is_active === false);
    
    console.log(`Email testado: ${email}`);
    console.log(`isActive: ${user.isActive} (${typeof user.isActive})`);
    console.log(`is_active: ${user.is_active} (${typeof user.is_active})`);
    console.log(`A condi√ß√£o (!(user.isActive === false || user.is_active === false)): ${loginPermitido}`);
    
    // Verificando a condi√ß√£o completa com a exce√ß√£o para o email ygorxrpx@gmail.com
    const emailExcecao = 'ygorxrpx@gmail.com';
    const ehEmailExcecao = email === emailExcecao;
    
    const loginBloqueadoCondicaoCompleta = email !== emailExcecao && (!user.isActive || !user.is_active);
    console.log(`\nCondi√ß√£o completa do bloqueio com exce√ß√£o para ${emailExcecao}:`);
    console.log(`Email verificado √© a exce√ß√£o: ${ehEmailExcecao}`);
    console.log(`Condi√ß√£o de bloqueio (email !== '${emailExcecao}' && (!isActive || !is_active)): ${loginBloqueadoCondicaoCompleta}`);
    
    if (loginBloqueadoCondicaoCompleta) {
      console.log(`\n‚ùå Conta ${email} seria bloqueada pela condi√ß√£o de login no AuthController!`);
      // Verificando quais campos est√£o causando o bloqueio
      if (!user.isActive) console.log('- Campo isActive est√° false ou undefined');
      if (!user.is_active) console.log('- Campo is_active est√° false ou undefined');
    } else {
      console.log(`\n‚úÖ Conta ${email} seria permitida pela condi√ß√£o de login no AuthController!`);
    }
    
    // Verificando se h√° propriedades undefined/null que podem estar causando o problema
    console.log('\nüîç Verificando valores undefined/null que podem causar problemas:');
    if (user.isActive === undefined) console.log('- isActive √© undefined!');
    if (user.is_active === undefined) console.log('- is_active √© undefined!');
    if (user.isActive === null) console.log('- isActive √© null!');
    if (user.is_active === null) console.log('- is_active √© null!');
    
    // For√ßando os campos novamente com tipo booleano expl√≠cito
    console.log('\nüîÑ For√ßando atualiza√ß√£o com tipos booleanos expl√≠citos:');
    const updateResult = await User.updateOne(
      { _id: user._id },
      { 
        $set: { 
          // Usando Boolean() para garantir o tipo correto
          isActive: true,
          is_active: true
        }
      }
    );
    
    console.log('Resultado da atualiza√ß√£o:', updateResult);
    
    // Verificando o tipo ap√≥s a atualiza√ß√£o
    const userAtualizado = await User.findOne({ _id: user._id });
    console.log('\n‚úÖ VERIFICA√á√ÉO FINAL:');
    console.log(`isActive: ${userAtualizado.isActive} (${typeof userAtualizado.isActive})`);
    console.log(`is_active: ${userAtualizado.is_active} (${typeof userAtualizado.is_active})`);
    
    // Fechando a conex√£o
    await mongoose.connection.close();
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar login:', error);
  } finally {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
    }
    process.exit(0);
  }
}

// Executar
verificarLogin(); 