require('dotenv').config();
const axios = require('axios');
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// URL base da API
const API_BASE_URL = 'http://localhost:3000';

async function testarLoginAdminAPI() {
  try {
    console.log('üîç Iniciando teste de login admin na API...');
    
    // Conectar ao MongoDB para obter a senha do admin
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ Conectado ao MongoDB Atlas com sucesso');
    
    // Schema flex√≠vel para acessar qualquer campo
    const userSchema = new mongoose.Schema({}, { strict: false });
    
    // Registrar o modelo
    let User;
    try {
      User = mongoose.model('User');
    } catch (e) {
      User = mongoose.model('User', userSchema);
    }
    
    // Obter o usu√°rio admin para verificar suas propriedades
    const email = 'admin@rpxplatform.com';
    const adminUser = await User.findOne({ 'contact.email': email }).select('+password');
    
    if (!adminUser) {
      console.log(`‚ùå Usu√°rio com email ${email} n√£o encontrado!`);
      return;
    }
    
    console.log('‚úÖ Usu√°rio admin encontrado:', adminUser._id);
    
    // Verificar se o usu√°rio admin tem as propriedades necess√°rias
    console.log('\nüìä USU√ÅRIO NO BANCO DE DADOS:');
    console.log('roles:', adminUser.roles);
    console.log('role:', adminUser.role);
    console.log('isAdmin:', adminUser.isAdmin);
    
    // Testar login na API
    console.log('\nüîÑ TESTANDO LOGIN ADMIN NA API:');
    console.log(`Endpoint de login: ${API_BASE_URL}/api/auth/login`);
    
    try {
      // Senha padr√£o para teste (ajuste conforme necess√°rio)
      const senhaParaTeste = "admin123";
      
      const loginData = {
        email: 'admin@rpxplatform.com',
        password: senhaParaTeste
      };
      
      console.log('üì§ Enviando requisi√ß√£o com os dados:', {
        email: loginData.email,
        password: '********' // Ocultando a senha real
      });
      
      // Fazer a requisi√ß√£o de login
      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, loginData);
      
      console.log(`‚úÖ Resposta recebida (Status ${response.status})`);
      
      // Analisar a estrutura da resposta
      const respostaCompleta = response.data;
      
      console.log('\nüìã ESTRUTURA COMPLETA DA RESPOSTA:');
      console.log(JSON.stringify(respostaCompleta, null, 2));
      
      // Verificar se a resposta cont√©m os dados do usu√°rio
      let userData = null;
      if (respostaCompleta.data && respostaCompleta.data.user) {
        userData = respostaCompleta.data.user;
        console.log('\nüë§ DADOS DO USU√ÅRIO NA RESPOSTA (data.user):');
      } else if (respostaCompleta.user) {
        userData = respostaCompleta.user;
        console.log('\nüë§ DADOS DO USU√ÅRIO NA RESPOSTA (user):');
      }
      
      if (userData) {
        console.log(JSON.stringify(userData, null, 2));
        
        // Verificar se o usu√°rio tem role/roles de admin
        let temRoleAdmin = false;
        if (userData.roles && Array.isArray(userData.roles) && userData.roles.includes('admin')) {
          console.log('\n‚úÖ O usu√°rio tem a role "admin" no array "roles"');
          temRoleAdmin = true;
        } else if (userData.role === 'admin') {
          console.log('\n‚úÖ O usu√°rio tem a propriedade "role" definida como "admin"');
          temRoleAdmin = true;
        } else {
          console.log('\n‚ùå O usu√°rio n√£o tem role de admin na resposta!');
        }
        
        // Verificar se a interface est√° verificando o campo correto
        if (!temRoleAdmin) {
          console.log('\n‚ö†Ô∏è PROBLEMA DETECTADO:');
          console.log('A API n√£o est√° retornando as roles do usu√°rio admin corretamente.');
          console.log('Verifique a fun√ß√£o que prepara os dados de usu√°rio para a resposta da API.');
        } else {
          // Simular a verifica√ß√£o que o frontend faz
          const verificacaoFrontend = userData.roles && userData.roles.includes('admin');
          
          if (!verificacaoFrontend) {
            console.log('\n‚ö†Ô∏è PROBLEMA NA VERIFICA√á√ÉO DO FRONTEND:');
            console.log('O frontend verifica a condi√ß√£o: userData.roles && userData.roles.includes("admin")');
            console.log('Mas a estrutura dos dados de usu√°rio na resposta n√£o atende a esta condi√ß√£o!');
            
            // Propor solu√ß√£o
            console.log('\nüìù SOLU√á√ÉO RECOMENDADA:');
            console.log('Modifique o c√≥digo no frontend para verificar tamb√©m "role == admin"');
          } else {
            console.log('\n‚úÖ A verifica√ß√£o no frontend deve funcionar corretamente!');
          }
        }
      } else {
        console.log('\n‚ùå N√£o foi poss√≠vel encontrar os dados do usu√°rio na resposta!');
      }
      
    } catch (apiError) {
      console.error('\n‚ùå Erro ao chamar API de login:', apiError.message);
      
      if (apiError.response) {
        console.log(`Status: ${apiError.response.status}`);
        console.log('Resposta de erro:', apiError.response.data);
      }
    }
    
    // Fechar conex√£o com o MongoDB
    await mongoose.connection.close();
    console.log('\n‚úÖ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante o teste:', error);
  } finally {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
    }
  }
}

// Executar o script
testarLoginAdminAPI(); 